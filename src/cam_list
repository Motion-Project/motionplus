alg.cpp:    if (cam->detecting_motion || cam->motapp->setup_mode) {
alg_sec.cpp:        (cam->motapp->log_level >= DBG)) {
alg_sec.cpp:        if (cam->motapp->log_level >= DBG) {
alg_sec.cpp:            if (cam->motapp->log_level >= DBG) {
conf.cpp:        motapp->daemon = false;
conf.cpp:        conf_edit_set_bool(motapp->daemon, parm);
conf.cpp:        conf_edit_get_bool(parm, motapp->daemon);
conf.cpp:        motapp->setup_mode = false;
conf.cpp:        conf_edit_set_bool(motapp->setup_mode, parm);
conf.cpp:        conf_edit_get_bool(parm, motapp->setup_mode);
conf.cpp:        motapp->conf_filename = "";
conf.cpp:        motapp->conf_filename = parm;
conf.cpp:        parm = motapp->conf_filename;
conf.cpp:        motapp->pid_file = "";
conf.cpp:        motapp->pid_file = parm;
conf.cpp:        parm = motapp->pid_file;
conf.cpp:        motapp->log_file = "";
conf.cpp:        motapp->log_file = parm;
conf.cpp:        parm = motapp->log_file;
conf.cpp:        motapp->log_level = 6;
conf.cpp:            motapp->log_level = parm_in;
conf.cpp:        parm = std::to_string(motapp->log_level);
conf.cpp:        motapp->log_type_str = "ALL";
conf.cpp:            motapp->log_type_str = parm;
conf.cpp:        parm = motapp->log_type_str;
conf.cpp:        motapp->native_language = true;
conf.cpp:        conf_edit_set_bool(motapp->native_language, parm);
conf.cpp:        conf_edit_get_bool(parm, motapp->native_language);
conf.cpp:        if (cam->motapp->cam_list[0] == cam) {
conf.cpp:        if (cam->motapp->cam_list[0] == cam) {
conf.cpp:    motapp->parms_changed = false;
conf.cpp:                motapp->parms_changed = true;
conf.cpp:                motapp->cam_list[threadnbr]->parms_changed = true;
conf.cpp:                conf_edit_cat(motapp->cam_list[threadnbr], parm_nm
conf.cpp:    conf_edit_v4l2_params(motapp->cam_list[threadnbr], parm_curr, PARM_ACT_GET);
conf.cpp:    while ((c = getopt(motapp->argc, motapp->argv, "bc:d:hmns?p:k:l:")) != EOF)
conf.cpp:            motapp->pause = true;
conf.cpp:    src_nm = motapp->conf_filename.substr(0, motapp->conf_filename.find_last_of("/") + 1);
conf.cpp:        while (motapp->cam_list[indx_cam] != NULL) {
conf.cpp:            if (fullnm == motapp->cam_list[indx_cam]->conf_filename) {
conf.cpp:        if (motapp->cam_list[indx_cam] == NULL) {
conf.cpp:    while (motapp->cam_list[indx_cam] != NULL) {
conf.cpp:    retcd = snprintf(motapp->cam_list[indx_cam-1]->conf_filename, PATH_MAX, "%s", fullnm.c_str());
conf.cpp:        motapp->cam_list[indx_cam-1]->conf_filename[0] = '\0';
conf.cpp:    while (motapp->cam_list[indx_cams] != NULL) {
conf.cpp:    motapp->cam_list = (struct ctx_cam **)myrealloc(
conf.cpp:        motapp->cam_list, sizeof(struct ctx_cam *) * (indx_cams + 2), "config_camera");
conf.cpp:    motapp->cam_list[indx_cams] = new ctx_cam;
conf.cpp:    memset(motapp->cam_list[indx_cams],0,sizeof(struct ctx_cam));
conf.cpp:    motapp->cam_list[indx_cams]->conf = new ctx_config;
conf.cpp:    motapp->cam_list[indx_cams + 1] = NULL;
conf.cpp:    motapp->cam_list[indx_cams]->motapp = motapp;
conf.cpp:    conf_edit_dflt_cam(motapp->cam_list[indx_cams]);
conf.cpp:            conf_edit_get(motapp->cam_list[0], config_parms[indx].parm_name
conf.cpp:    while (motapp->cam_list[indx_cam] != NULL) {
conf.cpp:    retcd = snprintf(motapp->cam_list[indx_cam]->conf_filename, PATH_MAX, "%s", filename.c_str());
conf.cpp:        motapp->cam_list[indx_cam]->conf_filename[0] = '\0';
conf.cpp:                    while (motapp->cam_list[++i]);
conf.cpp:                    motapp->cam_list[i-1]->from_conf_dir = true;
conf.cpp:    while (motapp->cam_list[indx_cam] != NULL) {
conf.cpp:        conffile = myfopen(motapp->cam_list[indx_cam]->conf_filename, "w");
conf.cpp:                , motapp->cam_list[indx_cam]->conf_filename);
conf.cpp:        fprintf(conffile, "; %s\n", motapp->cam_list[indx_cam]->conf_filename);
conf.cpp:            conf_edit_get(motapp->cam_list[indx_cam], config_parms[indx].parm_name
conf.cpp:            conf_edit_get(motapp->cam_list[0], config_parms[indx].parm_name
conf.cpp:                    conf_edit_get(motapp->cam_list[indx_cam], config_parms[indx].parm_name
conf.cpp:                        parm_val = motapp->conf_filename;
conf.cpp:            if (motapp->cam_list[0]->from_conf_dir == false) {
conf.cpp:                while (motapp->cam_list[indx] != NULL) {
conf.cpp:                            , motapp->cam_list[indx]->conf_filename);
conf.cpp:                            , motapp->cam_list[indx]->conf_filename);
conf.cpp:            , motapp->cam_list[indx_cam]->conf_filename);
conf.cpp:    motapp->argc = argc;
conf.cpp:    motapp->argv = argv;
conf.cpp:    if (motapp->conf_filename != "") {
conf.cpp:        filename = motapp->conf_filename;
conf.cpp:    motapp->cam_list = (struct ctx_cam**)calloc(sizeof(struct ctx_cam *), 2);
conf.cpp:    motapp->cam_list[0] = new ctx_cam;
conf.cpp:    memset(motapp->cam_list[0],0,sizeof(struct ctx_cam));
conf.cpp:    motapp->cam_list[1] = NULL;
conf.cpp:    motapp->cam_list[0]->motapp = motapp;
conf.cpp:    motapp->cam_list[0]->conf = new ctx_config;
conf.cpp:    conf_edit_dflt_cam(motapp->cam_list[0]);
conf.cpp:    if (motapp->conf_filename != "") {
conf.cpp:        retcd = snprintf(motapp->cam_list[0]->conf_filename
conf.cpp:                , PATH_MAX, "%s", motapp->conf_filename.c_str());
conf.cpp:            motapp->cam_list[0]->conf_filename[0] = '\0';
conf.cpp:                ,_("Error using config file %s"), motapp->conf_filename.c_str());
conf.cpp:            fp = fopen (motapp->conf_filename.c_str(), "r");
conf.cpp:            ,_("Processing thread 0 - config file %s"), motapp->conf_filename.c_str());
conf.cpp:    if (motapp->cam_list[1] == NULL) {
conf.cpp:    while (motapp->cam_list[indx] != NULL) {
conf.cpp:        motapp->cam_list[indx]->pause = motapp->pause;
conf.cpp:        motapp->cam_list[indx]->threadnr = indx;
conf.cpp:    while (motapp->cam_list[indx] != NULL) {
conf.cpp:        delete motapp->cam_list[indx]->conf;
conf.cpp:        delete motapp->cam_list[indx];
conf.cpp:    if (motapp->cam_list != NULL) {
conf.cpp:        free(motapp->cam_list);
conf.cpp:    motapp->cam_list = NULL;
dbse.cpp:        if (motapp->cam_list[0]->conf->database_type != "") {
dbse.cpp:            if ((motapp->cam_list[0]->conf->database_type == "mysql")) {
dbse.cpp:        if (motapp->cam_list[0]->conf->database_type != "") {
dbse.cpp:            if ((motapp->cam_list[0]->conf->database_type == "mariadb")) {
dbse.cpp:    while (motapp->cam_list[indx] != NULL) {
dbse.cpp:        if (motapp->cam_list[indx]->dbse != NULL) {
dbse.cpp:            free(motapp->cam_list[indx]->dbse);
dbse.cpp:        motapp->cam_list[indx]->dbse = NULL;
dbse.cpp:    while (motapp->cam_list[indx] != NULL) {
dbse.cpp:        motapp->cam_list[indx]->dbse = (struct ctx_dbse *)mymalloc(sizeof(struct ctx_dbse));
dbse.cpp:    if (motapp->cam_list[0]->conf->database_type != "") {
dbse.cpp:        if (dbse_global_edits(motapp->cam_list) == -1) {
dbse.cpp:            if ((motapp->cam_list[0]->conf->database_type == "mysql")) {
dbse.cpp:                        ,motapp->cam_list[0]->conf->database_type.c_str());
dbse.cpp:                    motapp->cam_list[0]->conf->database_type = "";
dbse.cpp:            if ((motapp->cam_list[0]->conf->database_type == "mariadb")) {
dbse.cpp:                        ,motapp->cam_list[0]->conf->database_type.c_str());
dbse.cpp:                    motapp->cam_list[0]->conf->database_type = "";
dbse.cpp:            motapp->cam_list[0]->dbse->database_sqlite3=NULL;
dbse.cpp:            if ((motapp->cam_list[0]->conf->database_type == "sqlite3") &&
dbse.cpp:                (motapp->cam_list[0]->conf->database_dbname != "")) {
dbse.cpp:                    ,motapp->cam_list[0]->conf->database_dbname.c_str());
dbse.cpp:                    if (sqlite3_open(motapp->cam_list[0]->conf->database_dbname.c_str()
dbse.cpp:                        , &motapp->cam_list[0]->dbse->database_sqlite3) != SQLITE_OK) {
dbse.cpp:                            ,motapp->cam_list[0]->conf->database_dbname.c_str()
dbse.cpp:                            ,sqlite3_errmsg(motapp->cam_list[0]->dbse->database_sqlite3));
dbse.cpp:                        sqlite3_close(motapp->cam_list[0]->dbse->database_sqlite3);
dbse.cpp:                            ,motapp->cam_list[0]->conf->database_dbname.c_str());
dbse.cpp:                        motapp->cam_list[0]->conf->database_type = "";
dbse.cpp:                            motapp->cam_list[0]->conf->database_busy_timeout);
dbse.cpp:                    if (sqlite3_busy_timeout(motapp->cam_list[0]->dbse->database_sqlite3
dbse.cpp:                        , motapp->cam_list[0]->conf->database_busy_timeout) != SQLITE_OK)
dbse.cpp:                            ,sqlite3_errmsg(motapp->cam_list[0]->dbse->database_sqlite3));
dbse.cpp:            while (motapp->cam_list[indx] != NULL) {
dbse.cpp:                motapp->cam_list[indx]->dbse->database_sqlite3 = motapp->cam_list[0]->dbse->database_sqlite3;
dbse.cpp:        if (cam->motapp->cam_list[0]->dbse->database_sqlite3 != 0) {
dbse.cpp:            cam->dbse->database_sqlite3 = cam->motapp->cam_list[0]->dbse->database_sqlite3;
logger.cpp:    pthread_mutex_lock(&log_motapp->mutex_parms);
logger.cpp:    pthread_mutex_unlock(&log_motapp->mutex_parms);
logger.cpp:    pthread_mutex_lock(&log_motapp->mutex_parms);
logger.cpp:    pthread_mutex_unlock(&log_motapp->mutex_parms);
logger.cpp:    pthread_mutex_lock(&log_motapp->mutex_parms);
logger.cpp:    pthread_mutex_unlock(&log_motapp->mutex_parms);
logger.cpp:    if ((motapp->log_level > ALL) ||
logger.cpp:        (motapp->log_level == 0)) {
logger.cpp:        motapp->log_level = LEVEL_DEFAULT;
logger.cpp:            ,log_level_str[motapp->log_level]
logger.cpp:            ,motapp->log_level);
logger.cpp:    if (motapp->log_file != "") {
logger.cpp:        if (motapp->log_file != "syslog") {
logger.cpp:            log_set_logfile(motapp->log_file.c_str());
logger.cpp:                    ,_("Logging to file (%s)"),motapp->log_file.c_str());
logger.cpp:                    ,motapp->log_file.c_str());
logger.cpp:    motapp->log_type = log_get_type(motapp->log_type_str.c_str());
logger.cpp:               log_type_str[motapp->log_type], log_level_str[motapp->log_level]);
logger.cpp:    log_set_level(motapp->log_level);
logger.cpp:    log_type = motapp->log_type;
logger.cpp:                   motapp->log_file.c_str());
motion_loop.cpp:            if (cam->motapp->log_level >= DBG) {
motion_loop.cpp:        if (conf->stream_motion && !cam->motapp->setup_mode && img->shot != 1) {
motion_loop.cpp:        cam->motapp->setup_mode ||
motion_loop.cpp:        cam->motapp->setup_mode ||
motion_loop.cpp:        cam->motapp->setup_mode ||
motion_loop.cpp:    if (cam->motapp->setup_mode || (cam->stream.motion.cnct_count > 0)) {
motion_loop.cpp:    if (cam->motapp->setup_mode) {
motion_loop.cpp:    if (cam->motapp->setup_mode) {
motion_loop.cpp:    if (cam->motapp->parms_changed) {
motion_loop.cpp:        log_set_level(cam->motapp->log_level);
motion_loop.cpp:        log_set_type(cam->motapp->log_type_str.c_str());
motion_loop.cpp:        cam->motapp->parms_changed = false;
motion_loop.cpp:    pthread_mutex_lock(&cam->motapp->global_lock);
motion_loop.cpp:        cam->motapp->threads_running++;
motion_loop.cpp:    pthread_mutex_unlock(&cam->motapp->global_lock);
motion_loop.cpp:    pthread_mutex_lock(&cam->motapp->global_lock);
motion_loop.cpp:        cam->motapp->threads_running--;
motion_loop.cpp:    pthread_mutex_unlock(&cam->motapp->global_lock);
motionplus.cpp:        if (motapp->cam_list != NULL) {
motionplus.cpp:            while (motapp->cam_list[indx] != NULL) {
motionplus.cpp:                if (motapp->cam_list[indx]->conf->snapshot_interval) {
motionplus.cpp:                    motapp->cam_list[indx]->snapshot = true;
motionplus.cpp:        if (motapp->cam_list != NULL) {
motionplus.cpp:            while (motapp->cam_list[indx] != NULL){
motionplus.cpp:                motapp->cam_list[indx]->event_stop = true;
motionplus.cpp:        motapp->restart_all = true;
motionplus.cpp:        motapp->webcontrol_finish = true;
motionplus.cpp:        if (motapp->cam_list != NULL) {
motionplus.cpp:            while (motapp->cam_list[indx]) {
motionplus.cpp:                motapp->cam_list[indx]->event_stop = true;
motionplus.cpp:                motapp->cam_list[indx]->finish_cam = true;
motionplus.cpp:                motapp->cam_list[indx]->restart_cam = false;
motionplus.cpp:        motapp->finish_all = true;
motionplus.cpp:    if ((motapp->daemon) &&
motionplus.cpp:        (motapp->pid_file != "") &&
motionplus.cpp:        (motapp->restart_all == false)) {
motionplus.cpp:        if (!unlink(motapp->pid_file.c_str())) {
motionplus.cpp:    if (motapp->pid_file != "") {
motionplus.cpp:        pidf = myfopen(motapp->pid_file.c_str(), "w+");
motionplus.cpp:                " id file (pid file) %s"),motapp->pid_file.c_str());
motionplus.cpp:            ,motapp->pid_file.c_str(), getpid());
motionplus.cpp:    mytranslate_text("",motapp->native_language);
motionplus.cpp:        if (motapp->daemon && motapp->setup_mode == 0) {
motionplus.cpp:    if (motapp->setup_mode) {
motionplus.cpp:    conf_parms_log(motapp->cam_list);
motionplus.cpp:    motion_camera_ids(motapp->cam_list);
motionplus.cpp:    motapp->cam_list[indx]->restart_cam = true;
motionplus.cpp:    retcd = pthread_create(&motapp->cam_list[indx]->thread_id
motionplus.cpp:                , &thread_attr, &motion_loop, motapp->cam_list[indx]);
motionplus.cpp:    motapp->restart_all = false;
motionplus.cpp:    if (!motapp->cam_list[indx]->running_cam) {
motionplus.cpp:    motapp->cam_list[indx]->watchdog--;
motionplus.cpp:    if (motapp->cam_list[indx]->watchdog == 0) {
motionplus.cpp:            , motapp->cam_list[indx]->threadnr);
motionplus.cpp:        motapp->cam_list[indx]->event_stop = true; /* Trigger end of event */
motionplus.cpp:        motapp->cam_list[indx]->finish_cam = true;
motionplus.cpp:    if (motapp->cam_list[indx]->watchdog == (0 - motapp->cam_list[indx]->conf->watchdog_kill) ) {
motionplus.cpp:            , motapp->cam_list[indx]->threadnr);
motionplus.cpp:        if ((motapp->cam_list[indx]->camera_type == CAMERA_TYPE_NETCAM) &&
motionplus.cpp:            (motapp->cam_list[indx]->netcam != NULL)) {
motionplus.cpp:            pthread_cancel(motapp->cam_list[indx]->netcam->thread_id);
motionplus.cpp:        if ((motapp->cam_list[indx]->camera_type == CAMERA_TYPE_NETCAM) &&
motionplus.cpp:            (motapp->cam_list[indx]->netcam_high != NULL)) {
motionplus.cpp:            pthread_cancel(motapp->cam_list[indx]->netcam_high->thread_id);
motionplus.cpp:        pthread_cancel(motapp->cam_list[indx]->thread_id);
motionplus.cpp:    if (motapp->cam_list[indx]->watchdog < (0 - motapp->cam_list[indx]->conf->watchdog_kill)) {
motionplus.cpp:            , motapp->cam_list[indx]->threadnr);
motionplus.cpp:        if ((motapp->cam_list[indx]->camera_type == CAMERA_TYPE_NETCAM) &&
motionplus.cpp:            (motapp->cam_list[indx]->netcam != NULL)) {
motionplus.cpp:            if (!motapp->cam_list[indx]->netcam->handler_finished &&
motionplus.cpp:                pthread_kill(motapp->cam_list[indx]->netcam->thread_id, 0) == ESRCH) {
motionplus.cpp:                motapp->cam_list[indx]->netcam->handler_finished = true;
motionplus.cpp:                pthread_mutex_lock(&motapp->global_lock);
motionplus.cpp:                    motapp->threads_running--;
motionplus.cpp:                pthread_mutex_unlock(&motapp->global_lock);
motionplus.cpp:                netcam_cleanup(motapp->cam_list[indx],false);
motionplus.cpp:                pthread_kill(motapp->cam_list[indx]->netcam->thread_id, SIGVTALRM);
motionplus.cpp:        if ((motapp->cam_list[indx]->camera_type == CAMERA_TYPE_NETCAM) &&
motionplus.cpp:            (motapp->cam_list[indx]->netcam_high != NULL)) {
motionplus.cpp:            if (!motapp->cam_list[indx]->netcam_high->handler_finished &&
motionplus.cpp:                pthread_kill(motapp->cam_list[indx]->netcam_high->thread_id, 0) == ESRCH) {
motionplus.cpp:                motapp->cam_list[indx]->netcam_high->handler_finished = true;
motionplus.cpp:                pthread_mutex_lock(&motapp->global_lock);
motionplus.cpp:                    motapp->threads_running--;
motionplus.cpp:                pthread_mutex_unlock(&motapp->global_lock);
motionplus.cpp:                netcam_cleanup(motapp->cam_list[indx], false);
motionplus.cpp:                pthread_kill(motapp->cam_list[indx]->netcam_high->thread_id, SIGVTALRM);
motionplus.cpp:        if (motapp->cam_list[indx]->running_cam &&
motionplus.cpp:            pthread_kill(motapp->cam_list[indx]->thread_id, 0) == ESRCH) {
motionplus.cpp:                , motapp->cam_list[indx]->threadnr);
motionplus.cpp:            pthread_mutex_lock(&motapp->global_lock);
motionplus.cpp:                motapp->threads_running--;
motionplus.cpp:            pthread_mutex_unlock(&motapp->global_lock);
motionplus.cpp:            mlp_cleanup(motapp->cam_list[indx]);
motionplus.cpp:            motapp->cam_list[indx]->running_cam = false;
motionplus.cpp:            motapp->cam_list[indx]->finish_cam = false;
motionplus.cpp:            pthread_kill(motapp->cam_list[indx]->thread_id,SIGVTALRM);
motionplus.cpp:    for (indx = (motapp->cam_list[1] != NULL ? 1 : 0); motapp->cam_list[indx]; indx++) {
motionplus.cpp:        if (motapp->cam_list[indx]->running_cam || motapp->cam_list[indx]->restart_cam) {
motionplus.cpp:    if ((motapp->webcontrol_finish == false) &&
motionplus.cpp:        (motapp->webcontrol_daemon != NULL)) {
motionplus.cpp:    if (((thrdcnt == 0) && motapp->finish_all) ||
motionplus.cpp:        ((thrdcnt == 0) && (motapp->threads_running == 0))) {
motionplus.cpp:            ,motapp->threads_running, thrdcnt, motapp->finish_all);
motionplus.cpp:    motapp->cam_list = NULL;
motionplus.cpp:    pthread_mutex_init(&motapp->global_lock, NULL);
motionplus.cpp:    pthread_mutex_init(&motapp->mutex_parms, NULL);
motionplus.cpp:    pthread_mutex_init(&motapp->mutex_camlst, NULL);
motionplus.cpp:    pthread_mutex_init(&motapp->mutex_post, NULL);
motionplus.cpp:    motapp->threads_running = 0;
motionplus.cpp:    motapp->finish_all = false;
motionplus.cpp:    motapp->restart_all = false;
motionplus.cpp:    motapp->argc = 0;
motionplus.cpp:    motapp->argv = NULL;
motionplus.cpp:    motapp->daemon = false;
motionplus.cpp:    motapp->conf_filename="";
motionplus.cpp:    motapp->pid_file="";
motionplus.cpp:    motapp->log_file="";
motionplus.cpp:    motapp->log_type_str="";
motionplus.cpp:    motapp->log_level=0;
motionplus.cpp:    motapp->log_type=0;
motionplus.cpp:    motapp->setup_mode = false;
motionplus.cpp:    motapp->pause = false;
motionplus.cpp:    motapp->native_language = false;
motionplus.cpp:    motapp->cam_add = false;
motionplus.cpp:    motapp->cam_delete = 0;
motionplus.cpp:    motapp->webcontrol_running = false;
motionplus.cpp:    motapp->webcontrol_finish = false;
motionplus.cpp:    motapp->webcontrol_daemon = NULL;
motionplus.cpp:    memset(motapp->webcontrol_digest_rand, 0, sizeof(motapp->webcontrol_digest_rand));
motionplus.cpp:    if (motapp->cam_add == false) {
motionplus.cpp:    pthread_mutex_lock(&motapp->mutex_camlst);
motionplus.cpp:    pthread_mutex_unlock(&motapp->mutex_camlst);
motionplus.cpp:    while (motapp->cam_list[indx_cam] != NULL) {
motionplus.cpp:        if (indx < motapp->cam_list[indx_cam]->camera_id) {
motionplus.cpp:            indx = motapp->cam_list[indx_cam]->camera_id;
motionplus.cpp:    motapp->cam_list[indx_cam]->camera_id = indx;
motionplus.cpp:    motapp->cam_list[indx_cam]->conf->camera_id = indx;
motionplus.cpp:    motapp->cam_list[indx_cam]->dbse = (struct ctx_dbse *)mymalloc(sizeof(struct ctx_dbse));
motionplus.cpp:    motapp->cam_list[indx_cam]->conf->webcontrol_port = 0;
motionplus.cpp:    motapp->cam_add = false;
motionplus.cpp:    if (motapp->cam_delete == 0) {
motionplus.cpp:    /* motapp->cam_delete contains the index of the cam to delete */
motionplus.cpp:    while (motapp->cam_list[indx_cam] != NULL) {
motionplus.cpp:    if (motapp->cam_delete > indx_cam) {
motionplus.cpp:            ,_("Invalid camera specified for deletion. %d"), motapp->cam_delete);
motionplus.cpp:    if (motapp->cam_list[motapp->cam_delete]->dbse != NULL) {
motionplus.cpp:        free(motapp->cam_list[motapp->cam_delete]->dbse);
motionplus.cpp:    motapp->cam_list[motapp->cam_delete]->dbse = NULL;
motionplus.cpp:    delete motapp->cam_list[motapp->cam_delete]->conf;
motionplus.cpp:    delete motapp->cam_list[motapp->cam_delete];
motionplus.cpp:    while (motapp->cam_list[indx_cam] != NULL) {
motionplus.cpp:        if (indx_cam != motapp->cam_delete) {
motionplus.cpp:            tmp[indx] = motapp->cam_list[indx_cam];
motionplus.cpp:    pthread_mutex_lock(&motapp->mutex_camlst);
motionplus.cpp:        if (motapp->cam_list != NULL) {
motionplus.cpp:            free(motapp->cam_list);
motionplus.cpp:        motapp->cam_list = tmp;
motionplus.cpp:    pthread_mutex_unlock(&motapp->mutex_camlst);
motionplus.cpp:    motapp->cam_delete = 0;
motionplus.cpp:        if (motapp->restart_all) {
motionplus.cpp:        for (indx = motapp->cam_list[1] != NULL ? 1 : 0; motapp->cam_list[indx]; indx++) {
motionplus.cpp:            motapp->cam_list[indx]->threadnr = indx ? indx : 1;
motionplus.cpp:            for (indx = (motapp->cam_list[1] != NULL ? 1 : 0); motapp->cam_list[indx]; indx++) {
motionplus.cpp:                if ((!motapp->cam_list[indx]->running_cam) &&
motionplus.cpp:                    (motapp->cam_list[indx]->restart_cam)) {
motionplus.cpp:                        ,_("Motion thread %d restart"), motapp->cam_list[indx]->threadnr);
motionplus.cpp:        motapp->finish_all = false;
motionplus.cpp:        if (motapp->restart_all) {
motionplus.cpp:    pthread_mutex_destroy(&motapp->global_lock);
motionplus.cpp:    pthread_mutex_destroy(&motapp->mutex_parms);
motionplus.cpp:    pthread_mutex_destroy(&motapp->mutex_camlst);
motionplus.cpp:    pthread_mutex_destroy(&motapp->mutex_post);
netcam.cpp:        //netcam->motapp-> ->watchdog = 60;
netcam.cpp:        while (netcam->motapp->cam_list[indx] != NULL) {
netcam.cpp:            if ((netcam->motapp->cam_list[indx]->netcam == netcam) ||
netcam.cpp:                (netcam->motapp->cam_list[indx]->netcam_high == netcam)) {
netcam.cpp:                netcam->motapp->cam_list[indx]->event_stop = true;
netcam.cpp:    pthread_mutex_lock(&netcam->motapp->global_lock);
netcam.cpp:        netcam->motapp->threads_running--;
netcam.cpp:    pthread_mutex_unlock(&netcam->motapp->global_lock);
netcam.cpp:    pthread_mutex_lock(&netcam->motapp->global_lock);
netcam.cpp:        netcam->threadnbr = ++netcam->motapp->threads_running;
netcam.cpp:    pthread_mutex_unlock(&netcam->motapp->global_lock);
netcam.cpp:                    pthread_mutex_lock(&netcam->motapp->global_lock);
netcam.cpp:                        netcam->motapp->threads_running--;
netcam.cpp:                    pthread_mutex_unlock(&netcam->motapp->global_lock);
webu.cpp:    if (webui->motapp->cam_list != NULL) {
webu.cpp:        while (webui->motapp->cam_list[++indx]) {
webu.cpp:        webui->cam = webui->motapp->cam_list[0];
webu.cpp:        while (webui->motapp->cam_list[indx] != NULL) {
webu.cpp:            if (webui->motapp->cam_list[indx]->camera_id == webui->threadnbr) {
webu.cpp:        webui->cam = webui->motapp->cam_list[indx];
webu.cpp:    if (webui->motapp->cam_list[0]->conf->webcontrol_ipv6) {
webu.cpp:        webui->hostfull = "//localhost:" + std::to_string(webui->motapp->cam_list[0]->conf->webcontrol_port) + webui->motapp->cam_list[0]->conf->webcontrol_base_path;
webu.cpp:        webui->hostfull = "//" + std::string(hdr) + webui->motapp->cam_list[0]->conf->webcontrol_base_path;
webu.cpp:    it = webui->motapp->webcontrol_clients.begin();
webu.cpp:    while (it != webui->motapp->webcontrol_clients.end()) {
webu.cpp:    webui->motapp->webcontrol_clients.push_back(clients);
webu.cpp:    it = webui->motapp->webcontrol_clients.begin();
webu.cpp:    while (it != webui->motapp->webcontrol_clients.end()) {
webu.cpp:            it = webui->motapp->webcontrol_clients.erase(it);
webu.cpp:    it = webui->motapp->webcontrol_clients.begin();
webu.cpp:    while (it != webui->motapp->webcontrol_clients.end()) {
webu.cpp:    webui->motapp->webcontrol_clients.push_back(clients);
webu.cpp:    if (webui->motapp->webcontrol_clients.size() == 0) {
webu.cpp:    it = webui->motapp->webcontrol_clients.begin();
webu.cpp:    while (it != webui->motapp->webcontrol_clients.end()) {
webu.cpp:            it = webui->motapp->webcontrol_clients.erase(it);
webu.cpp:    auth_len = webui->motapp->cam_list[0]->conf->webcontrol_authentication.length();
webu.cpp:    col_pos =(char*) strstr(webui->motapp->cam_list[0]->conf->webcontrol_authentication.c_str() ,":");
webu.cpp:            ,webui->motapp->cam_list[0]->conf->webcontrol_authentication.c_str());
webu.cpp:            ,webui->motapp->cam_list[0]->conf->webcontrol_authentication.c_str());
webu.cpp:    if (webui->motapp->cam_list[0]->conf->webcontrol_authentication == "") {
webu.cpp:        if (webui->motapp->cam_list[0]->conf->webcontrol_auth_method != "none") {
webu.cpp:    if (webui->motapp->cam_list[0]->conf->webcontrol_auth_method == "basic") {
webu.cpp:    } else if (webui->motapp->cam_list[0]->conf->webcontrol_auth_method == "digest") {
webu.cpp:        if (webui->motapp->webcontrol_headers->params_count > 0) {
webu.cpp:            for (indx = 0; indx < webui->motapp->webcontrol_headers->params_count; indx++) {
webu.cpp:                    , webui->motapp->webcontrol_headers->params_array[indx].param_name
webu.cpp:                    , webui->motapp->webcontrol_headers->params_array[indx].param_value
webu.cpp:    pthread_mutex_lock(&webui->motapp->mutex_post);
webu.cpp:    pthread_mutex_unlock(&webui->motapp->mutex_post);
webu.cpp:    if (webui->motapp->cam_list[0]->conf->webcontrol_interface == "user") {
webu.cpp:        pthread_mutex_lock(&webui->motapp->mutex_post);
webu.cpp:        pthread_mutex_unlock(&webui->motapp->mutex_post);
webu.cpp:        pthread_mutex_lock(&webui->motapp->mutex_post);
webu.cpp:            if (webui->motapp->cam_list[0]->conf->webcontrol_interface == "user") {
webu.cpp:        pthread_mutex_unlock(&webui->motapp->mutex_post);
webu.cpp:            if (mhdst->motapp->cam_list[0]->conf->webcontrol_auth_method == "basic") {
webu.cpp:                mhdst->motapp->cam_list[0]->conf->webcontrol_auth_method = "none";
webu.cpp:            if (mhdst->motapp->cam_list[0]->conf->webcontrol_auth_method == "digest") {
webu.cpp:                mhdst->motapp->cam_list[0]->conf->webcontrol_auth_method = "none";
webu.cpp:        if (mhdst->motapp->cam_list[0]->conf->webcontrol_tls) {
webu.cpp:            mhdst->motapp->cam_list[0]->conf->webcontrol_tls = 0;
webu.cpp:            if (mhdst->motapp->cam_list[0]->conf->webcontrol_tls) {
webu.cpp:                mhdst->motapp->cam_list[0]->conf->webcontrol_tls = 0;
webu.cpp:    if (mhdst->motapp->cam_list[0]->conf->webcontrol_tls) {
webu.cpp:        if ((mhdst->motapp->cam_list[0]->conf->webcontrol_cert == "") || (mhdst->tls_cert == "")) {
webu.cpp:            mhdst->motapp->cam_list[0]->conf->webcontrol_tls = 0;
webu.cpp:        if ((mhdst->motapp->cam_list[0]->conf->webcontrol_key == "") || (mhdst->tls_key == "")) {
webu.cpp:            mhdst->motapp->cam_list[0]->conf->webcontrol_tls = 0;
webu.cpp:    if (mhdst->motapp->cam_list[0]->conf->webcontrol_localhost) {
webu.cpp:            mhdst->lpbk_ipv6.sin6_port = htons(mhdst->motapp->cam_list[0]->conf->webcontrol_port);
webu.cpp:            mhdst->lpbk_ipv4.sin_port = htons(mhdst->motapp->cam_list[0]->conf->webcontrol_port);
webu.cpp:    if (mhdst->motapp->cam_list[0]->conf->webcontrol_auth_method == "digest") {
webu.cpp:        mhdst->mhd_ops[mhdst->mhd_opt_nbr].value = sizeof(mhdst->motapp->webcontrol_digest_rand);
webu.cpp:        mhdst->mhd_ops[mhdst->mhd_opt_nbr].ptr_value = mhdst->motapp->webcontrol_digest_rand;
webu.cpp:    if (mhdst->motapp->cam_list[0]->conf->webcontrol_tls) {
webu.cpp:    if (mhdst->motapp->cam_list[0]->conf->webcontrol_tls) {
webu.cpp:    motapp->webcontrol_actions = (ctx_params*)mymalloc(sizeof(struct ctx_params));
webu.cpp:    motapp->webcontrol_actions->update_params = true;
webu.cpp:    util_parms_parse(motapp->webcontrol_actions, motapp->cam_list[0]->conf->webcontrol_actions);
webu.cpp:    if (motapp->cam_list[0]->conf->webcontrol_parms == 0) {
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"event",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"snapshot",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"pause",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"restart",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"stop",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"config_write",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"camera_add",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"camera_delete",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"config",parm_vl);
webu.cpp:    util_parms_add_default(motapp->webcontrol_actions,"ptz",parm_vl);
webu.cpp:        , motapp->cam_list[0]->conf->webcontrol_port);
webu.cpp:    motapp->webcontrol_headers = (ctx_params*)mymalloc(sizeof(struct ctx_params));
webu.cpp:    motapp->webcontrol_headers->update_params = true;
webu.cpp:    util_parms_parse(motapp->webcontrol_headers, motapp->cam_list[0]->conf->webcontrol_headers);
webu.cpp:    mhdst.tls_cert = webu_mhd_loadfile(motapp->cam_list[0]->conf->webcontrol_cert);
webu.cpp:    mhdst.tls_key  = webu_mhd_loadfile(motapp->cam_list[0]->conf->webcontrol_key);
webu.cpp:    mhdst.ipv6 = motapp->cam_list[0]->conf->webcontrol_ipv6;
webu.cpp:    snprintf(motapp->webcontrol_digest_rand
webu.cpp:        ,sizeof(motapp->webcontrol_digest_rand),"%d",randnbr);
webu.cpp:    motapp->webcontrol_daemon = MHD_start_daemon (
webu.cpp:        , motapp->cam_list[0]->conf->webcontrol_port
webu.cpp:        , &webu_answer, motapp->cam_list
webu.cpp:    if (motapp->webcontrol_daemon == NULL) {
webu.cpp:            ,motapp->cam_list[0]->conf->webcontrol_port);
webu.cpp:    if (motapp->webcontrol_daemon != NULL) {
webu.cpp:        motapp->webcontrol_finish = true;
webu.cpp:        MHD_stop_daemon (motapp->webcontrol_daemon);
webu.cpp:    util_parms_free(motapp->webcontrol_headers);
webu.cpp:    if (motapp->webcontrol_headers != NULL) {
webu.cpp:        free(motapp->webcontrol_headers);
webu.cpp:    motapp->webcontrol_headers = NULL;
webu.cpp:    util_parms_free(motapp->webcontrol_actions);
webu.cpp:    if (motapp->webcontrol_actions != NULL) {
webu.cpp:        free(motapp->webcontrol_actions);
webu.cpp:    motapp->webcontrol_actions = NULL;
webu.cpp:    motapp->webcontrol_daemon = NULL;
webu.cpp:    motapp->webcontrol_finish = false;
webu.cpp:    if (motapp->cam_list[0]->conf->webcontrol_port != 0 ) {
webu_html.cpp:    wact = webui->motapp->webcontrol_actions;
webu_html.cpp:    fp = fopen(webui->motapp->cam_list[0]->conf->webcontrol_html.c_str(), "r");
webu_html.cpp:            , webui->motapp->cam_list[0]->conf->webcontrol_html.c_str());
webu_json.cpp:    if (webui->motapp->cam_list[0]->conf->webcontrol_parms < WEBUI_LEVEL_LIMITED) {
webu_json.cpp:    conf_edit_get(webui->motapp->cam_list[indx_cam]
webu_json.cpp:        conf_edit_list(webui->motapp->cam_list[indx_cam]
webu_json.cpp:                webui->motapp->cam_list[0]->conf->webcontrol_parms) &&
webu_json.cpp:    while (webui->motapp->cam_list[indx_cam] != NULL) {
webu_json.cpp:            std::to_string(webui->motapp->cam_list[indx_cam]->camera_id) + "\": ";
webu_json.cpp:    while (webui->motapp->cam_list[indx_cam] != NULL) {
webu_json.cpp:    while (webui->motapp->cam_list[indx_cam] != NULL) {
webu_json.cpp:        } else if (webui->motapp->cam_list[indx_cam]->conf->camera_name == "") {
webu_json.cpp:                std::to_string(webui->motapp->cam_list[indx_cam]->camera_id) + "\"";
webu_json.cpp:                webui->motapp->cam_list[indx_cam]->conf->camera_name + "\"";
webu_json.cpp:            std::to_string(webui->motapp->cam_list[indx_cam]->camera_id);
webu_json.cpp:                "/" + std::to_string(webui->motapp->cam_list[indx_cam]->camera_id) +
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:    webui->motapp->cam_add = true;
webu_post.cpp:    while ((webui->motapp->cam_add == true) && (indx < maxcnt)) {
webu_post.cpp:        webui->motapp->cam_add = false;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:    webui->motapp->cam_list[webui->threadnbr]->restart_cam = false;
webu_post.cpp:    webui->motapp->cam_list[webui->threadnbr]->finish_cam = true;
webu_post.cpp:    while ((webui->motapp->cam_list[webui->threadnbr]->running_cam) && (indx < maxcnt)) {
webu_post.cpp:    webui->motapp->cam_delete = webui->threadnbr;
webu_post.cpp:    while ((webui->motapp->cam_delete > 0) && (indx < maxcnt)) {
webu_post.cpp:        webui->motapp->cam_delete = 0;
webu_post.cpp:    while (webui->motapp->cam_list[indx] != NULL) {
webu_post.cpp:        if (webui->motapp->cam_list[indx]->camera_id == camid) {
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:        while (webui->motapp->cam_list[indx]) {
webu_post.cpp:            webui->motapp->cam_list[indx]->event_stop = true;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->event_stop = true;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:        while (webui->motapp->cam_list[indx]) {
webu_post.cpp:            webui->motapp->cam_list[indx]->event_user = true;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->event_user = true;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:        while (webui->motapp->cam_list[indx]) {
webu_post.cpp:            webui->motapp->cam_list[indx]->snapshot = true;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->snapshot = true;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:        while (webui->motapp->cam_list[indx]) {
webu_post.cpp:            webui->motapp->cam_list[indx]->pause = true;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->pause = true;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:        while (webui->motapp->cam_list[indx]) {
webu_post.cpp:            webui->motapp->cam_list[indx]->pause = false;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->pause = false;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:        while (webui->motapp->cam_list[indx]) {
webu_post.cpp:            webui->motapp->cam_list[indx]->restart_cam = true;
webu_post.cpp:            webui->motapp->cam_list[indx]->finish_cam = true;
webu_post.cpp:            , webui->motapp->cam_list[webui->threadnbr]->camera_id);
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->restart_cam = true;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->finish_cam = true;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:        while (webui->motapp->cam_list[indx]) {
webu_post.cpp:                , webui->motapp->cam_list[indx]->camera_id);
webu_post.cpp:            webui->motapp->cam_list[indx]->restart_cam = false;
webu_post.cpp:            webui->motapp->cam_list[indx]->event_stop = true;
webu_post.cpp:            webui->motapp->cam_list[indx]->event_user = true;
webu_post.cpp:            webui->motapp->cam_list[indx]->finish_cam = true;
webu_post.cpp:            , webui->motapp->cam_list[webui->threadnbr]->camera_id);
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->restart_cam = false;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->event_stop = true;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->event_user = true;
webu_post.cpp:        webui->motapp->cam_list[webui->threadnbr]->finish_cam = true;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:                if ((config_parms[indx2].webui_level > webui->motapp->cam_list[0]->conf->webcontrol_parms) ||
webu_post.cpp:                    if (webui->motapp->native_language) {
webu_post.cpp:    wact = webui->motapp->webcontrol_actions;
webu_post.cpp:    cam = webui->motapp->cam_list[webui->threadnbr];
webu_stream.cpp:    if (webui->cam->motapp->webcontrol_finish) {
webu_stream.cpp:    if (webui->cam->motapp->webcontrol_finish) {
webu_stream.cpp:            (webui->motapp->cam_list[webui->threadnbr]->conf->stream_motion)) {
webu_stream.cpp:            webui->stream_fps = webui->motapp->cam_list[webui->threadnbr]->conf->stream_maxrate;
webu_stream.cpp:    if (webui->cam->motapp->webcontrol_finish) {
webu_stream.cpp:    pthread_mutex_lock(&webui->motapp->mutex_camlst);
webu_stream.cpp:            pthread_mutex_unlock(&webui->motapp->mutex_camlst);
webu_stream.cpp:            pthread_mutex_unlock(&webui->motapp->mutex_camlst);
webu_stream.cpp:    pthread_mutex_unlock(&webui->motapp->mutex_camlst);
webu_stream.cpp:    if (webui->motapp->webcontrol_headers->params_count > 0) {
webu_stream.cpp:        for (indx = 0; indx < webui->motapp->webcontrol_headers->params_count; indx++) {
webu_stream.cpp:                , webui->motapp->webcontrol_headers->params_array[indx].param_name
webu_stream.cpp:                , webui->motapp->webcontrol_headers->params_array[indx].param_value
webu_stream.cpp:    if (webui->motapp->webcontrol_headers->params_count > 0) {
webu_stream.cpp:        for (indx = 0; indx < webui->motapp->webcontrol_headers->params_count; indx++) {
webu_stream.cpp:                , webui->motapp->webcontrol_headers->params_array[indx].param_name
webu_stream.cpp:                , webui->motapp->webcontrol_headers->params_array[indx].param_value
